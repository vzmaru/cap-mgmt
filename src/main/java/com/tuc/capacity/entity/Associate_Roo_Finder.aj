// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.tuc.capacity.entity;

import com.tuc.capacity.entity.Associate;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Associate_Roo_Finder {
    
    public static TypedQuery<Associate> Associate.findAssociatesByEidEquals(String eid) {
        if (eid == null || eid.length() == 0) throw new IllegalArgumentException("The eid argument is required");
        EntityManager em = Associate.entityManager();
        TypedQuery<Associate> q = em.createQuery("SELECT o FROM Associate AS o WHERE o.eid = :eid", Associate.class);
        q.setParameter("eid", eid);
        return q;
    }
    
    public static TypedQuery<Associate> Associate.findAssociatesByEmpIdEquals(String empId) {
        if (empId == null || empId.length() == 0) throw new IllegalArgumentException("The empId argument is required");
        EntityManager em = Associate.entityManager();
        TypedQuery<Associate> q = em.createQuery("SELECT o FROM Associate AS o WHERE o.empId = :empId", Associate.class);
        q.setParameter("empId", empId);
        return q;
    }
    
    public static TypedQuery<Associate> Associate.findAssociatesByEmpIdLike(String empId) {
        if (empId == null || empId.length() == 0) throw new IllegalArgumentException("The empId argument is required");
        empId = empId.replace('*', '%');
        if (empId.charAt(0) != '%') {
            empId = "%" + empId;
        }
        if (empId.charAt(empId.length() - 1) != '%') {
            empId = empId + "%";
        }
        EntityManager em = Associate.entityManager();
        TypedQuery<Associate> q = em.createQuery("SELECT o FROM Associate AS o WHERE LOWER(o.empId) LIKE LOWER(:empId)", Associate.class);
        q.setParameter("empId", empId);
        return q;
    }
    
}
