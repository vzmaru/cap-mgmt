// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.tuc.capacity.entity;

import com.tuc.capacity.entity.Associate;
import com.tuc.capacity.entity.AssociateDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AssociateDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AssociateDataOnDemand: @Component;
    
    private Random AssociateDataOnDemand.rnd = new SecureRandom();
    
    private List<Associate> AssociateDataOnDemand.data;
    
    public Associate AssociateDataOnDemand.getNewTransientAssociate(int index) {
        Associate obj = new Associate();
        setEid(obj, index);
        setEmpId(obj, index);
        setName(obj, index);
        setStatus(obj, index);
        return obj;
    }
    
    public void AssociateDataOnDemand.setEid(Associate obj, int index) {
        String eid = "eid_" + index;
        obj.setEid(eid);
    }
    
    public void AssociateDataOnDemand.setEmpId(Associate obj, int index) {
        String empId = "empId_" + index;
        obj.setEmpId(empId);
    }
    
    public void AssociateDataOnDemand.setName(Associate obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void AssociateDataOnDemand.setStatus(Associate obj, int index) {
        String status = "status_" + index;
        obj.setStatus(status);
    }
    
    public Associate AssociateDataOnDemand.getSpecificAssociate(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Associate obj = data.get(index);
        Long id = obj.getId();
        return Associate.findAssociate(id);
    }
    
    public Associate AssociateDataOnDemand.getRandomAssociate() {
        init();
        Associate obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Associate.findAssociate(id);
    }
    
    public boolean AssociateDataOnDemand.modifyAssociate(Associate obj) {
        return false;
    }
    
    public void AssociateDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Associate.findAssociateEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Associate' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Associate>();
        for (int i = 0; i < 10; i++) {
            Associate obj = getNewTransientAssociate(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
