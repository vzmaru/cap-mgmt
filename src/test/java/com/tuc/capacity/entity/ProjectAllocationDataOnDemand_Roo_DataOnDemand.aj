// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.tuc.capacity.entity;

import com.tuc.capacity.entity.Associate;
import com.tuc.capacity.entity.AssociateDataOnDemand;
import com.tuc.capacity.entity.Project;
import com.tuc.capacity.entity.ProjectAllocation;
import com.tuc.capacity.entity.ProjectAllocationDataOnDemand;
import com.tuc.capacity.entity.ProjectDataOnDemand;
import com.tuc.capacity.entity.mstr.Location;
import com.tuc.capacity.entity.mstr.LocationDataOnDemand;
import com.tuc.capacity.entity.mstr.ProjectRoleDataOnDemand;
import com.tuc.capacity.entity.mstr.Rate;
import com.tuc.capacity.entity.mstr.RateDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProjectAllocationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProjectAllocationDataOnDemand: @Component;
    
    private Random ProjectAllocationDataOnDemand.rnd = new SecureRandom();
    
    private List<ProjectAllocation> ProjectAllocationDataOnDemand.data;
    
    @Autowired
    AssociateDataOnDemand ProjectAllocationDataOnDemand.associateDataOnDemand;
    
    @Autowired
    LocationDataOnDemand ProjectAllocationDataOnDemand.locationDataOnDemand;
    
    @Autowired
    ProjectRoleDataOnDemand ProjectAllocationDataOnDemand.projectRoleDataOnDemand;
    
    @Autowired
    ProjectDataOnDemand ProjectAllocationDataOnDemand.projectDataOnDemand;
    
    @Autowired
    RateDataOnDemand ProjectAllocationDataOnDemand.rateDataOnDemand;
    
    public ProjectAllocation ProjectAllocationDataOnDemand.getNewTransientProjectAllocation(int index) {
        ProjectAllocation obj = new ProjectAllocation();
        setAssociate(obj, index);
        setEndDate(obj, index);
        setLocation(obj, index);
        setProject(obj, index);
        setRate(obj, index);
        setStartDate(obj, index);
        return obj;
    }
    
    public void ProjectAllocationDataOnDemand.setAssociate(ProjectAllocation obj, int index) {
        Associate associate = associateDataOnDemand.getRandomAssociate();
        obj.setAssociate(associate);
    }
    
    public void ProjectAllocationDataOnDemand.setEndDate(ProjectAllocation obj, int index) {
        Date endDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setEndDate(endDate);
    }
    
    public void ProjectAllocationDataOnDemand.setLocation(ProjectAllocation obj, int index) {
        Location location = locationDataOnDemand.getRandomLocation();
        obj.setLocation(location);
    }
    
    public void ProjectAllocationDataOnDemand.setProject(ProjectAllocation obj, int index) {
        Project project = projectDataOnDemand.getRandomProject();
        obj.setProject(project);
    }
    
    public void ProjectAllocationDataOnDemand.setRate(ProjectAllocation obj, int index) {
        Rate rate = rateDataOnDemand.getRandomRate();
        obj.setRate(rate);
    }
    
    public void ProjectAllocationDataOnDemand.setStartDate(ProjectAllocation obj, int index) {
        Date startDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartDate(startDate);
    }
    
    public ProjectAllocation ProjectAllocationDataOnDemand.getSpecificProjectAllocation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProjectAllocation obj = data.get(index);
        Long id = obj.getId();
        return ProjectAllocation.findProjectAllocation(id);
    }
    
    public ProjectAllocation ProjectAllocationDataOnDemand.getRandomProjectAllocation() {
        init();
        ProjectAllocation obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ProjectAllocation.findProjectAllocation(id);
    }
    
    public boolean ProjectAllocationDataOnDemand.modifyProjectAllocation(ProjectAllocation obj) {
        return false;
    }
    
    public void ProjectAllocationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProjectAllocation.findProjectAllocationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProjectAllocation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProjectAllocation>();
        for (int i = 0; i < 10; i++) {
            ProjectAllocation obj = getNewTransientProjectAllocation(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
